
-----------------Complete Demo Models of Djano---------------

# first create an app and registering is must.
--------------------------------------------------------------
# check the migrations with 
 cmd: python3 manage.py checkmigrations
# shows migrations history

---------------------------------------------------------------

-----------------------------------------------------------------
# settings.py
---- By default django will look default database key at first............

# confirming the our database directory with os .
# add print(BASE_DIR) at the head of DATABASES.

dilli@acer-g41:/media/dilli/SSD 1/IW-BootCamp/Projects/django/helloworld$ python3 manage.py runserver
/media/dilli/SSD 1/IW-BootCamp/Projects/django/helloworld
/media/dilli/SSD 1/IW-BootCamp/Projects/django/helloworld
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
August 10, 2021 - 11:55:26
Django version 3.2.5, using settings 'helloworld.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

# This shows (/media/dilli/SSD 1/IW-BootCamp/Projects/django/helloworld) our data base directory is correct and connected correctly to the db.

--------------------------------------------------------------------

# adding multiple databases to the db like oracle,mysql
# for default it is SQLite database provided by django.

---------------------------------------------------------------------

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
print(BASE_DIR)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

----------------------------------------------------------------------

# How to enter the sqlite db?
--> cmd is sqlite3 db.sqlite3 (if you donot have install sqlite in your machine you can install sudo apt install sqlite )
# checking and entering into the sqlite database
-----------------------------------------------------
sqlite3 db.sqlite3
SQLite version 3.22.0 2018-01-22 18:45:57
Enter ".help" for usage hints.
sqlite> 

# from inside it we can write query ,modifying ,updating everything.
--------------------------------------------------------------------

# we can also use GNU view IDE viewers database.

---------------------------------------------------------------
# models.py
# we created attributes is_active as we know we can insert default to the attributes 
# so we added default=False for is_active status.

# EmailField has kept CharField as subclass if we deep look into EmailField signature
# this is our model and we can perform operations on it now.

from django.db import models

class UserInfo(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    age = models.IntegerField()

    bio = models.CharField(max_length=200, blank=True)

    is_active = models.BooleanField(default=False)


# ok let's make migrations and migrate it to database.
# after that let's migrations that django has made for us.
-------------------------------------------------------------

# migrations/0001_initial.py
------------------------------------------------------

# we have gave name, email, age , is_active attributes and field for the model UserInfo whereas we have not gave id 

# if we operations migrations.CreateModel there is an additional attributes named id which is uniquely made by django itself.

# ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),

---------------------------------------------------------
# django takes the empty attributes as empty strings
# if we donot save any data in name or email django will make the field as empty string.
# remeber blank is just application layer validation not a database validation.


-------------------------------------------------------------
# Generated by Django 3.2.5 on 2021-08-10 12:58
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('age', models.IntegerField()),
                ('bio', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField(default=False)),
            ],
        ),
    ]

------------------------------------------------------------------

-----------------------CREATING,UPDATING AND EDITING DATA IN DB WITH ORM-----------------

# we can use django shell for this 
# then we import models.py of modelextra in shell
---------------------------------
cmd : python3 manage.py shell 
>>> from modelextra.models import UserInfo
-----------------------------------

# creating a new row in table UserInfo
>>> UserInfo.objects.create()
IntegrityError: NOT NULL constraint failed: modelextra_userinfo.age
# this will raise error 

# eventhough we have not sent null=True in 
 age = models.IntegerField()
# null is false but error has raised as NOT NULL CONSTRAINT.

--- only age got error but not name and email -- WHY?
--- FOR CHARFIELD EMPTY VALUES WILL BE EMPTY LIST BY DJANGO----
# as empty list is not a null
# our EmailField has also taken CharField as subclass
--------------------------
# but IntegerField is not a CharField 
----------------------------
# for is_active our default is False and value not given then it will false.

-------------------------------------------------------------------------

# let's create objects in field and UserInfo table.
>>> UserInfo.objects.create(name="Dilli Hang", email="dilli@gmail.com",age=22)
<UserInfo: UserInfo object (1)>
# returned objects

--tips: in django our last operations result is saved at _ or underscore by django memory.

>>> x = _
>>> x.name
'Dilli Hang'

>>> x.email
'dilli@gmail.com'

>>>x.age
22

# now we can put or logics here
>>> if x.age>10: print ("You are not a kid anymore!")
...
You are not a kid anymore!

# This shows that we can now easily retrieve data from db, loop it, put conditions ,logics, edit,update it.

-------ok let's change dilli's age to 50--------
>>> x.age = 50
# then we save it and db will know the age value is updated or changed.
>>> x.save()
--------------------THis is normal update for age field-------------------------

-------------------Cases,Updating,editing value on CharField-------------------
# as we know django will take empty values as empty strings of charfield.
# eg:
>>> y = UserInfo.objects.create(age=22)
>>> y
 <UserInfo: UserInfo object (2)>
 # this shows we didnot get any error and new object is created on table only with row age 22 name and email field empty and is_active is by default= False.

# this shows django takes charfield's empty values as empty string.
------------------------------------------------------------------------------

# Note: normally all validations is not done by ORM as the empty strings created by passing empty value but in actual validation we do create model_validation , full clean method for validating the model making sure that
the name and email should not be left empty.
# we can do blank type application layer validation on front end part .

# but some level of validation is done by django itself like if we try to send string into the age integerfield we get error called 
>>> y = UserInfo.objects.create(age="string")
#ValueError: Field 'age' expected a number but got 'string'.
-----------------------------------------------------------------------------

-----------Validation Models--with--Full--Clean---Method---------------

# full clean method
# we use this method for model validation.
# we have used small hack for model field validation.
# we override the save method with self.full_clean() and return super class save method.


from django.db import models

class UserInfo(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    age = models.IntegerField()

    bio = models.CharField(max_length=200, blank=True)

    is_active =models.BooleanField(default=False)

    def save(self, **kwargs):
        self.full_clean()  # validation calling full clean method
        return super().save(**kwargs) # returning save method with super user


-------now open new python3 manage.py shell-------------------

# and we try to add only age to the models UserInfo

>>> from modelextra.models import UserInfo
>>> y = UserInfo.objects.create(age=25)

# now error will raise.
ValidationError: {'name': ['This field cannot be blank.'], 'email': ['This field cannot be blank.']}

--this shows that we can do the validations of model on ORM hitting.
--- with full_clean() method we can validate the whole model before saving to the database from ORM or shell..

-------------------------------------------------------------------------------












