
-----------------Complete Demo Models of Djano---------------

# first create an app and registering is must.
--------------------------------------------------------------
# check the migrations with 
 cmd: python3 manage.py checkmigrations
# shows migrations history

---------------------------------------------------------------

-----------------------------------------------------------------
# settings.py
---- By default django will look default database key at first............

# confirming the our database directory with os .
# add print(BASE_DIR) at the head of DATABASES.

dilli@acer-g41:/media/dilli/SSD 1/IW-BootCamp/Projects/django/helloworld$ python3 manage.py runserver
/media/dilli/SSD 1/IW-BootCamp/Projects/django/helloworld
/media/dilli/SSD 1/IW-BootCamp/Projects/django/helloworld
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
August 10, 2021 - 11:55:26
Django version 3.2.5, using settings 'helloworld.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

# This shows (/media/dilli/SSD 1/IW-BootCamp/Projects/django/helloworld) our data base directory is correct and connected correctly to the db.

--------------------------------------------------------------------

# adding multiple databases to the db like oracle,mysql
# for default it is SQLite database provided by django.

---------------------------------------------------------------------

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
print(BASE_DIR)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

----------------------------------------------------------------------

# How to enter the sqlite db?
--> cmd is sqlite3 db.sqlite3 (if you donot have install sqlite in your machine you can install sudo apt install sqlite )
# checking and entering into the sqlite database
-----------------------------------------------------
sqlite3 db.sqlite3
SQLite version 3.22.0 2018-01-22 18:45:57
Enter ".help" for usage hints.
sqlite> 

# from inside it we can write query ,modifying ,updating everything.
--------------------------------------------------------------------

# we can also use GNU view IDE viewers database.

---------------------------------------------------------------
# models.py
# we created attributes is_active as we know we can insert default to the attributes 
# so we added default=False for is_active status.

# EmailField has kept CharField as subclass if we deep look into EmailField signature
# this is our model and we can perform operations on it now.

from django.db import models

class UserInfo(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    age = models.IntegerField()

    bio = models.CharField(max_length=200, blank=True)

    is_active = models.BooleanField(default=False)


# ok let's make migrations and migrate it to database.
# after that let's migrations that django has made for us.
-------------------------------------------------------------

# migrations/0001_initial.py
------------------------------------------------------

# we have gave name, email, age , is_active attributes and field for the model UserInfo whereas we have not gave id 

# if we operations migrations.CreateModel there is an additional attributes named id which is uniquely made by django itself.

# ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),

---------------------------------------------------------
# django takes the empty attributes as empty strings
# if we donot save any data in name or email django will make the field as empty string.
# remeber blank is just application layer validation not a database validation.


-------------------------------------------------------------
# Generated by Django 3.2.5 on 2021-08-10 12:58
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('age', models.IntegerField()),
                ('bio', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField(default=False)),
            ],
        ),
    ]

------------------------------------------------------------------

-----------------------CREATING,UPDATING AND EDITING DATA IN DB WITH ORM-----------------

# we can use django shell for this 
# then we import models.py of modelextra in shell
---------------------------------
cmd : python3 manage.py shell 
>>> from modelextra.models import UserInfo
-----------------------------------

# creating a new row in table UserInfo
>>> UserInfo.objects.create()
IntegrityError: NOT NULL constraint failed: modelextra_userinfo.age
# this will raise error 

# eventhough we have not sent null=True in 
 age = models.IntegerField()
# null is false but error has raised as NOT NULL CONSTRAINT.

--- only age got error but not name and email -- WHY?
--- FOR CHARFIELD EMPTY VALUES WILL BE EMPTY LIST BY DJANGO----
# as empty list is not a null
# our EmailField has also taken CharField as subclass
--------------------------
# but IntegerField is not a CharField 
----------------------------
# for is_active our default is False and value not given then it will false.

-------------------------------------------------------------------------

# let's create objects in field and UserInfo table.
>>> UserInfo.objects.create(name="Dilli Hang", email="dilli@gmail.com",age=22)
<UserInfo: UserInfo object (1)>
# returned objects

--tips: in django our last operations result is saved at _ or underscore by django memory.

>>> x = _
>>> x.name
'Dilli Hang'

>>> x.email
'dilli@gmail.com'

>>>x.age
22

# now we can put or logics here
>>> if x.age>10: print ("You are not a kid anymore!")
...
You are not a kid anymore!

# This shows that we can now easily retrieve data from db, loop it, put conditions ,logics, edit,update it.

-------ok let's change dilli's age to 50--------
>>> x.age = 50
# then we save it and db will know the age value is updated or changed.
>>> x.save()
--------------------THis is normal update for age field-------------------------

-------------------Cases,Updating,editing value on CharField-------------------
# as we know django will take empty values as empty strings of charfield.
# eg:
>>> y = UserInfo.objects.create(age=22)
>>> y
 <UserInfo: UserInfo object (2)>
 # this shows we didnot get any error and new object is created on table only with row age 22 name and email field empty and is_active is by default= False.

# this shows django takes charfield's empty values as empty string.
------------------------------------------------------------------------------

# Note: normally all validations is not done by ORM as the empty strings created by passing empty value but in actual validation we do create model_validation , full clean method for validating the model making sure that
the name and email should not be left empty.
# we can do blank type application layer validation on front end part .

# but some level of validation is done by django itself like if we try to send string into the age integerfield we get error called 
>>> y = UserInfo.objects.create(age="string")
#ValueError: Field 'age' expected a number but got 'string'.
-----------------------------------------------------------------------------

-----------Validation Models--with--Full--Clean---Method---------------

# full clean method
# we use this method for model validation.
# we have used small hack for model field validation.
# we override the save method with self.full_clean() and return super class save method.


from django.db import models

class UserInfo(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    age = models.IntegerField()

    bio = models.CharField(max_length=200, blank=True)

    is_active =models.BooleanField(default=False)

    def save(self, **kwargs):
        self.full_clean()  # validation calling full clean method
        return super().save(**kwargs) # returning save method with super user


-------now open new python3 manage.py shell-------------------

# and we try to add only age to the models UserInfo

>>> from modelextra.models import UserInfo
>>> y = UserInfo.objects.create(age=25)

# now error will raise.
# this is validation error from model not from database.
ValidationError: {'name': ['This field cannot be blank.'], 'email': ['This field cannot be blank.']}

--this shows that we can do the validations of model on ORM hitting.
--- with full_clean() method we can validate the whole model before saving to the database from ORM or shell..

-------------------------------------------------------------------------------

[2]: from modelextra.models import UserInfo

In [3]: y = UserInfo.objects.get(id=1)

In [4]: y
Out[4]: <UserInfo: UserInfo object (1)>

In [5]: y = UserInfo.objects.get(id=2)

In [6]: y
Out[6]: <UserInfo: UserInfo object (2)>

In [7]: y = UserInfo.objects.get(id=3)

In [8]: y
Out[8]: <UserInfo: UserInfo object (3)>


In [9]: y.age
Out[9]: 30

In [10]: y.name
Out[10]: ''

In [11]: y.name = 'Shyam'

In [12]: y.save()
---------------------------------------------------------------------------
ValidationError                           Traceback (most recent call last)
<ipython-input-12-26b16d9c9a2d> in <module>
----> 1 y.save()

/media/dilli/SSD 1/IW-BootCamp/Projects/django/helloworld/modelextra/models.py in save(self, **kwargs)
     12 
     13     def save(self, **kwargs):
---> 14         self.full_clean()
     15         return super().save(**kwargs)

~/.local/lib/python3.6/site-packages/django/db/models/base.py in full_clean(self, exclude, validate_unique)
   1236 
   1237         if errors:
-> 1238             raise ValidationError(errors)
   1239 
   1240     def clean_fields(self, exclude=None):

ValidationError: {'email': ['This field cannot be blank.']}

# here error raised due to validation of model with ful_clean() method that we have created by ourselves.


In [13]: y.email = "shyam@gmail.com"

In [14]: y.name
Out[14]: 'Shyam'

In [15]: y.email
Out[15]: 'shyam@gmail.com'

In [16]: y.save()

In [17]: y
Out[17]: <UserInfo: UserInfo object (3)>
# now our data is saved on db.

---------------------------------------------------
# Case -I
# if we have to delete shyam row.

# first we get the objects.
>>> a = UserInfo.objects.get(id=2) 

#(we could do.get(name="shyam")  but name shyam is not unique so we use id which is always unique.

----------------------------------------------------------
# Case - II

# What if we try to use.get() method to retrieve the same mulitple place used data from table ?
# for eg : in this case we have shyam age 50 and id 2 also has age 50 now if we try to get the user from table with only.

>>> UserInfo.objects.get(age=50).

# then we get error 
 MultipleObjectsReturned: get() returned more than one UserInfo -- it returned 2!
 # this is bcoz get method is only used for calling only one objects.
# .get() only reterive single data objects stored in db.

-----------------------------------------------------------
# Case - III
# NO I need all users from the db having age 50?
# for that we can use .filter() method

In [30]: a = UserInfo.objects.filter(age=50)

In [31]: a
Out[31]: <QuerySet [<UserInfo: UserInfo object (2)>, <UserInfo: UserInfo object (3)>]>

In [32]: type(a)
Out[32]: django.db.models.query.QuerySet

In [33]: for i in a: print(i.name)

Shyam

# although we have two row containing age 50 we get onyl shyam bcoz we havenot given name to id 2 yet.
# a is now iterables and we can iterate it loop it.

# Case - IV
# Deleting the user data in the table.
# first we get the user objects and used delete() method to delete it.

In [45]: a = UserInfo.objects.get(id=3)

In [46]: a
Out[46]: <UserInfo: UserInfo object (3)>

In [47]: a.delete()
Out[47]: (1, {'modelextra.UserInfo': 1})


---------we can put loops,take to html and logics on it further-----

--------------------------------------------------------------------
# Case - V
# creating again row objects in the table.
 a
Out[48]: <UserInfo: UserInfo object (None)>

In [49]: a = UserInfo.objects.create(name="shyam",email="shyam@gmail.com",age=50,is_active=False)

In [50]: a
Out[50]: <UserInfo: UserInfo object (4)>

# we get new created obj id 4 bcoz id is always unique and id 3 was used in shyam's table.

-------------------------OR-------------------

# first we create a UserInfo class and assigned attributes putting values inside it and saving it to the db.

>>> obj = UserInfo()
>>> obj.name = "shyam"
>>> obj.email = "shyam@gmail.com"
>>> obj.age = 50
>>> obj.is_active = False
>>> obj.save()


-----------above both methods are same way to create a new row and table in the db-----------
---------------------------------------------------------------------


-----View sqlite table with sqlite cmd----------------

sqlite3 db.sqlite3
SQLite version 3.22.0 2018-01-22 18:45:57
Enter ".help" for usage hints.
sqlite> select * from modelextra_userinfo;
1|dilli hang|dilli@gmail.com|21||0
2|Ram|ram@gmail.com|50||0
4|shyam|shyam@gmail.com|50||1
sqlite> 
------------------------------------------------------------

--------------------created model---------------------------
-----------------practice with creating a lots of field-------
------------keep options value null default blank------------



# eg:
# let's add a detail attribute in UserInfo model with no null value.
# then what we get is followin error

>>> python3 manage.py makemigrations
You are trying to add a non-nullable field 'detail' to userinfo without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 2

--------------------------------------------------------------
# we tried to add newfield but null is not kept true 
# as we have already rows columns in table with pre-existing values of users so django is asking what to do with old rows ?

# and django provide first option to solve this issue as you may enter the default value
# and opt 2 is quiting and making own default in models.py

-------------------------------------------------------------------

# now we make null=True into newfield options which is now case is detail.

from django.db import models

class UserInfo(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    age = models.IntegerField()

    bio = models.CharField(max_length=200, blank=True)

    detail = models.CharField(max_length=200)

    is_active =models.BooleanField(default=False)

    def save(self, **kwargs):
        self.full_clean()
        return super().save(**kwargs)

# now makemigrations and migrate and check db table.
# checking migrations folder in app we can get new file named 0002_userinfo_detail.py made by django itself.

-----------------------------------------------------------------




