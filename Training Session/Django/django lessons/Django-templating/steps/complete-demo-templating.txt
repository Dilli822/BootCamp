

------------------# Our Root Settings -----------------------------

"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1=4b5x+6u7pyb3#*lj)!n81_rnf%6^1s3rrmq*otm91j)klrt-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',


]
#
# ROOT_URLCONF = 'django_project.urls'

ROOT_URLCONF = 'django_project.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

----------------------------------------------------------------------------------

---------------------------------------------------------------------------------
#app folder in djangoproject folder 
#djangoproject/app/views.py

from django.http import HttpResponse

from django.template import loader

def home(request):
    return HttpResponse("Hello world")

# creating logics for dynamic view url request and response

def profile(request, name):
    print("user who requested name is:", name)
    # string_data = "Your Profile Name is: {}".format{name}
    string_data = f"Your Profile Name is: { name }"
    return HttpResponse(string_data)


# Root urls.py in djangoproject folder
from django.contrib import admin
from django.urls import path
from app.views import home, profile


urlpatterns = [
    path('admin/', admin.site.urls),
    path('', home),
    path('profile/<str:name>/', profile),


# Now for templating  we create templating folder inside the app
# and inside the templating folder again we create a templates folder
# this template folder should contain our html files.
# djangoproject/app/templating/templates
# now I created a home.html file in djangoproject/app/templating/templates
# dir will be djangoproject/app/templating/templates/home.html

# now we need to send our html to views
# for that we define function for html.
#  we also import load function from django template.
# At present we leave the context as blank {} with curly brackets.
# we use loader and .get_template method to load the html file.
# then render using .render method with first param context and second request
# finally we do return it as HttpResponse(variable)


from django.template import loader

def first_template(request):
    template = loader.get_template('hello.html')
    context = {}
    template_data = template.render(context, request)
    return HttpResponse(template_data)


# Starting new app for templating
1. django-admin startapp templating inside the main project django folder.
2. create another templates folder inside it.
3. new dir will be mainprojectdjangofolder/templating/templates/home.html
-------home.html will be--------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Home</title>
</head>
<body>
 <h1>Welcome to home page.</h1>
</body>
</html>
--------------------------------------------
4. then add urls.py in templating folder.
from django.urls import path

from .views import home_templates,

urlpatterns = [
    path('home-template/', )
]

------------------------------------------------
# then now we create views in our templating foler
# templating/views.py
# we import .template helder and  loader for loading template in our view
from django.http import HttpResponse
from django.template import loader

def first_template(request):
    template = loader.get_template('home.html')
    context = {}
    template_data = template.render(context, request)
    return HttpResponse(template_data)


