
------------------Demo-Forms----------------------------

# First we create an app 
# register the app


# let's create urls.py in the djangoforms for the url
# then we create template folder and we can put files in  formsfolder.


# creating views 
# registering to url of formsfolder app.

---projectfolder
      ---- project folder with files
       ------ apps folder
       
 
 
 # we create urls.py inside the new app folder 
 # then we create a templates folder inside a app folder.
 # and again create template_html folder inside a templates folder for storing html files.
 # then we create index.html or any templates html files for front end part.
 
 -------we come to app/views.py and write small views logics---------
 ---- at app/urls.py we import the views func and pass url path i.e.path('home/', view_func_name),
 
 ---- then we register the url in the main project urls.py by importing include function and
 ---- we add path -- path('forms/', include('appsname.urls')),
 
 
 # let's create a simple form in html templates folder.
 # apps/templates/formspractice/forms.html
 
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title> Django HTML Forms</title>
    </head>
    <body>

    <form action="">
        <label for=""></label>
        <input type="text" name="name" placeholder="Your Name"> <br>
        <input type="submit" name="submit">
    </form>

    </body>
    </html>
    
  -------------------------------------------------------------------------
  -- How to send the data of form to the backend?-------
  
  # for that we go to the app/views.py and write small logics
  
 from django.shortcuts import render

from django.http import HttpResponse

def home_forms(request):
    if request.method == 'GET':
        print("====OK THIS IS GET METHOD.===")
        return render(request, 'formspractice/forms.html', {})
    else: # must be post method
        print(request.POST)
        return HttpResponse("OKOK")
        
        -----server will print we can check on server console for clear confirmation---
        ====OK THIS IS GET METHOD.===
[14/Aug/2021 16:21:10] "GET /forms/home/ HTTP/1.1" 200 458
====OK THIS IS GET METHOD.===
[14/Aug/2021 16:21:11] "GET /forms/home/ HTTP/1.1" 200 458
====OK THIS IS GET METHOD.===
[14/Aug/2021 16:21:15] "GET /forms/home/ HTTP/1.1" 200 458
====OK THIS IS GET METHOD.===
[14/Aug/2021 16:21:16] "GET /forms/home/ HTTP/1.1" 200 458
====OK THIS IS GET METHOD.===
[14/Aug/2021 16:21:16] "GET /forms/home/ HTTP/1.1" 200 458

-----this shows that by default our request method id GET 
--- for changing the request method of form what we do is change the method attribute of html form
-- ie. <form method="POST" action="forms/home">  </form> only for form posting method.
--- refresh the page and click on the submit button---

# we get error forbidden on page because while sending the form or while we are accepting the POST request from client we must include csrf token {% csrf_token %} in our forms.html and provide token to client-side.

# every post req must have csrf token so error has raised.
# we can add {% csrf_token %} anywhere inside th form tag of forms.html


-- now refresh the server and form page also check the view source page-
# this is what we get to see

    <form action="/forms/home/", method="post">

        <input type="hidden" name="csrfmiddlewaretoken"     value="ue66DwedCtQchxBCmtof8EfSBGVxhcbHgY9wACuL9HNEzkBb8mK8HUVERjY1BaGV">

        <input type="text" name="name" placeholder="Your Name"> <br>
        <input type="submit" name="submit">

    </form>
  
  # with single tag {% csrf_token %} django has generated input tag with hidden type, name and value(value is for cross side protection).
  
  --now we can post the data to server.
  
  ---OKOK will come after submitting the data.
  
  ---------------------------------------------------------
  
  # now lets write name or pass string value in the name field of form.
  # and submit to server.
  # checking the server terminal console we get.
  <QueryDict: {'csrfmiddlewaretoken': ['z1NxizhojMRsgIeg9Zuc0iUi8LDX05cXlLQXfFxWQ0OUyvePVSQ5zyA4ooGrk3Hb'], 'name': ['dilli'], 'submit': ['Submit Query']}>
[14/Aug/2021 16:37:30] "POST /forms/home/ HTTP/1.1" 200 4
# we are getting the information of client who had submitted the  form in this the client/user is dilli with submit query and unique csrf token value.

---also we can look the client's name directly on server console.
-- with function .get('name'))
 else: # must be post method
        print(request.POST.get('name'))
        return HttpResponse("OKOK")
Quit the server with CONTROL-C.
dilli
[14/Aug/2021 16:40:48] "POST /forms/home/ HTTP/1.1" 200 4

--This is an example of simple form and user/client submitting the form with data and we are getting the data from user and extracting the information in a simple way..


--------------------------------------------------------
----Now let's make proper form---------

# it's good practice to make all the forms in the form.py 
# we make several fields in the forms.py of app folder.
# creating MyForm with field name
# now we can use this MyForm to render the data at the frontend and validate the data that comes to the backend.

# forms.py
from django import forms

clas MyForm(forms.Form):
     name = forms.CharField(max_length=100)
     
-----------------------
# we create a new html file named django_form.html 
# and we create key value pair in context {'form': form}
# views.py

# we created a func 
# then obj called form and we pass the obj to the templates forms.html as context {'key': value }

from .forms import MyForm

def django_form(request):
    form = MyForm()
    return render(request, 'formspractice/django_form.html', {'form': form})
    
 
 # now we pass <form> {{ form }} </form>
 
 # ok let's make url for this.
 from .views import home_forms, django_form
 
 urlpatterns = [
    path('home/', home_forms),
    path('home/django-forms', django_form),
]

-----NOw hitting the url https://127.0.0.1:8000/forms/django-forms/
# we get name field 
# viewing the source page

  <form>
      <tr><th><label for="id_name">Name:</label></th><td><input type="text" name="name" maxlength="100" required id="id_name"></td></tr>
      
# this means django has created itself table field table row automatically.

----------------------------------------------------------------------------------

# THis much only is done by django now we can or have to add the form tags and other input as we have done in previous forms.html

  <form action="/forms/home/", method="POST">

    {% csrf_token %}
    {{ form }}

    <input type="submit" name="submit">
    
  </form>
  
 ----------------or-----------
  
   {% csrf_token %}
    <!-- {{ form }} -->
    <!-- {{ form.as_P }} means we are viewing form as paragraph-->
    {{ form.as_p }}
    </form>
 
   # view source page
   
    <form action="/forms/django-forms/" method="post">

    <input type="hidden" name="csrfmiddlewaretoken" value="6idvDmk9XMc9CJPJh3QKhOgexcZ7kSZFS2gVAsAHu09BUwPi3WcDQ4W0NP2BEQuT">
    <!-- <tr><th><label for="id_name">Name:</label></th><td><input type="text" name="name" maxlength="100" required id="id_name"></td></tr> -->
    <!--  means we are viewing form as paragraph-->
    <p><label for="id_name">Name:</label> <input type="text" name="name" maxlength="100" required id="id_name"></p>

    <input type="submit" name="submit">

  </form>
  
 ------------------------------------------------------------------------------------
 
 ---now if we submit the form with name written and submit button
 # checking the server terminal console what we get is:
 
 [14/Aug/2021 17:11:48] "GET /forms/django-forms/ HTTP/1.1" 200 537
dilli
[14/Aug/2021 17:13:59] "POST /forms/home/ HTTP/1.1" 200 4

# noticed GET/ Is changeD into POST/

# but if we look into the django_form func from where template is rendered 
# we havenot mentioned any POST or get

def django_form(request):
    form = MyForm()
    return render(request, 'formspractice/django-form.html', {'form': form})

# THis shows the form has done post request in the backend.
 -------------------------------------------------------------------------------------
 
 ---------VAlidation Error Case-----------
 # forms.py
 
  name = forms.CharField(max_length="2")

-----------------------Hack-------------------------
# we use small hack as max_length = 2 doesnot allow us to enter more than 2 characters
# so we inspect and remove the max_length = 2 from input tag in html and now we can enter the characters more than 2.
# entering the name having characters morethan 2 will throw error.
-------------------------------------------------
http://127.0.0.1:8000/forms/django-forms/
# submitting the form will throw error 
# i.e. Something is wrong! 
# because we have validate the field form upto max_length 2 only and we sent the mulitple characters.
# and we handle the error or validate the form.

-------------------------------------------------------------------------
# we handled the error and now we can do it in more better
# passing the form to the front end simply return render(request, 'formspractice/forms.html', {'form': form})
# def django_form(request):
    if request.method == 'GET':
        form = MyForm()
        return render(request, 'formspractice/django-form.html', {'form': form})
    else: # must be POST method
        form = MyForm(request.POST)
        if form.is_valid():
            print(form.cleaned_data)
            return HttpResponse("Everything is Ok")
        else:
            #return HttpResponse("Something is wrong!")
             return render(request, 'formspractice/django-form.html', {'form': form})

# now error will be 
Ensure this value has at most 2 characters (it has 17).
Name: 
Ram Bahadur

submit

# here  our form is not valid form.is_valid() condition not satisfied.
---- forms name also gets preserved.
# with the help of this django form our work makes easier.

-- In the case of form validation 
# enter the valid characters and form.
# print(form.cleaned_data)
# here cleaned_data is dictionary which is getting printed on server terminal.
# no we hit ORM in the database.

[15/Aug/2021 05:59:52] "POST /forms/django-forms/ HTTP/1.1" 200 775
{'name': '12'}
[15/Aug/2021 06:02:46] "POST /forms/django-forms/ HTTP/1.1" 200 16

--------------validating the field-----------------
# validating the name field.
# forms.py
from django import forms

class MyForm(forms.Form):
    name = forms.CharField(max_length=100)

    def clean_name(self):
        print("I am from form", self.cleaned_data)
        return "Ram"
------------------------------------------------
# enter the name Dilli Hang in the name input 
# we get in terminal as cleaned_data which is in dict form.
# we are returning Ram.

I am from form {'name': 'Dilli Hang'}
{'name': 'Ram'}
[15/Aug/2021 06:07:52] "POST /forms/django-forms/ HTTP/1.1" 200 16
----------------------------------------------------
# now we can take the value of self.cleaned_data in name var
# then we can take value of dict as name and return the name.

    def clean_name(self):
        print("I am from form", self.cleaned_data)

        name = self.cleaned_data['name']
        # We can do any validations or clean the name
        return "name"
  --------------------------------------------------------------      
 # submit the django form with validing we get in server terminal.
 
 I am from form {'name': 'Dilli Hang'}
{'name': 'Dilli Hang'}
[15/Aug/2021 06:12:04] "POST /forms/django-forms/ HTTP/1.1" 200 16
-----------------------------------------------------------

after validation on views {'name': 'Dilli Hang'}
{'name': 'Dilli Hang'}
[15/Aug/2021 06:14:46] "POST /forms/django-forms/ HTTP/1.1" 200 16

# this shows the name dilli hang is in form and validation on views is printed.
# this is a clean method.

#  def clean_name(self):
        print("after validation on views", self.cleaned_data)

        name = self.cleaned_data['name']
        # We can do any validations or clean the name
        return name.lower()
        
after validation on views {'name': 'DILLI'}
{'name': 'dilli'}
[15/Aug/2021 06:16:37] "POST /forms/django-forms/ HTTP/1.1" 200 16

# This shows at the form name is in upper case when it goes to form but after the validation on the veiws it is in lower case
# and def clean_name() method returned the name in lower case.
# and we can use the field validations in this way for other fields like age ,bio, details.

-----------------------------------------------------------------------------------------------

--When we have to make several fields 
--first we create a models.
from django.db import models

class FormsModel(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()

    
--- now creating it's forms





