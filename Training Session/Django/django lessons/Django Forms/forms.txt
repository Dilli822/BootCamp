
---------------------HTML--FORMS------------------

# A collection of elements inside <form> </form>
# which allows visitor to input data or manipulate data send the information back to server.

# A form must specify two things.
     -- The URL (action attribute)
     --- The HTTP(method attribute).


# Example of simple HTML form
     <form action="/send-data">
        <label for="fname">First name:</label> <br>
        <input type="text" id="fname" name="fname" value="Dilli"> <br>
        <label for="lname">Last name:</label> <br>
        <input type="text" id="lname" name="lname" value="Hang Rai"> <br>
        <button type="submit" value="submit">submit</button>
        </form>


-------------GET & POST----------------------

# GET & POST are only HTTP methods to use when dealing with forms


--POST

# In which browser bundles up the form data, encodes it for transmission and sends it to the server and receives back the response.

---GET

# Bundles the submitted data into a string and composes a URL based on it.
  Eg: https://example.com/send?name=ram&age=22
 
#Note: we use POST method to send the form input or sensitive data to server because GET method display the information on URL but POST method means it bundles the user input submitted data and send along with forms to server without spiliting any information like GET in the url to server.

-----------------------------------------------------


-----------------Django Forms------------------------

# Prepare data to make it ready for rendering
# Creating HTML forms for the data
# Receiving and processing submitted forms and data from the client.

# data validation and data processing of the submitted forms , defining forms, representing datas on from model are some reasons of using django forms.


----------Simple HTML form with explanation---------
# See: form action . form method and input

 <form action="/send/" method="post">
        <label for="name">Your Name: </label>
        <input type="text" id="name" name="name" value="{{ current_name }}">
        <input type="submit" value="submit">
        </form>

-----------Creating this form in Django------------

# we import forms from django
# creating MyForm class and placing name field in the Myform attributes.
# where to keep these code?
# It's good to place forms code on forms.py under our django application.

# forms.py

from django.import forms

class MyForm(forms.Form):
      name = forms.CharField(label='Name', max_length=100)

-----------------------------------------------------
# we defined a form class with a single field(name)
# we added a human friendly label to the field. This will appear in the <label> when it's rendered.
# The field maximum allowed length is defined by max_length
 --puts maxlength=100 on the HTML <input>
 -- when django receives the data , it will validate the length of the data.

----frontend part also receives max_length=100 while form validation.

----------is_valid() method-------
----- it will validate the form same as full_clean() method.........

# A form instance has is_valid() method which will run all validations.
# when it's called, if all the fields contain valid then it will 
--Return True
--Place the form's data in cleaned_data attribute.

------------------When Rendering our form it will look like----------
--- rendering form of django will look like it in HTML------

  <label for="id_name">Name: </label>
        <input type="text" name="name" maxlength="100" required id="id_name">


# django only generate from fields elements but it doesnot keep other tags buttons submit.


=============HOW DOES EVERYTHING FIT?==================

# Creating new view to pass our form to template.

from django.shortcuts import render

from .forms import MyForm

def render_form(request):
    form = MyForm()
   
   # pass from instance to template using context
   # passed same as context: html we used to do in html_context
    return render(request, 'name.html', {'form': form})
-------------------------------------------------------------------



------------Making Template(name.html)-------------------

# we first create template of form by ourselves.
# now we have torender the form that comes from context
# with variables {{ }} django will render the html context.


     <form action="/send/" method="post">
        {% csrf_token %}  # cross site request forgery protection
                          # csrf_token is required when submitting from via post
                          # with CSRF protection enabled.
        
        {{ form }}
        
        <input type="submit" value="submit">
        </form>

---------------------------------------------------------------

-----------------View to process submitted data----------------------

from django.http import HttpResponse
from .forms import MyForm


# Let's assume: URL /send/ points to this view func
def send(request):
    # this func will allow both GET and POST to land here
    # so we might need to add some Validations


    form = MyForm(request.POST)
    if form.is_valid():
        # process the data in form.cleaned_data as required
    
    else:
        return HttpResponse('Error')
          
------------------------------------------------------------------------
# we can disable the csrf_token cross site if we want to do that.

    <form action="/send/" method="post">
        {% csrf_token %}  # cross site request forgery protection
                          # csrf_token is required when submitting from via post
                          # with CSRF protection enabled.
        
        {{ form }}
        
        <input type="submit" value="submit">
        </form>

-------------------------------------------------------------------

-------------------Let's merge these two views---------------------
----this is data incoming logics type------------

from django.http import HttpResponse
from .forms import MyForm

def send(request):
    if request.method == 'POST':
        form = MyForm(request.POST)
        if form.is_valid():
            #process the data in form.cleaned_data as required
            return HttpResponse('Everything is OK')
        
        else:  # form is not valid
            return HttpResponse('Error')
        else:
            form = MyForm()
            return render(request, 'name.html', {{ 'form': form}})

----------------------------------------------------------------------


-------------{{ form }} in template is enough but,---------------

-- There are other output options for <label> <input> pairs
-- {{ forms.as_table }} will render them as table cells wrapper in <tr> tags
-- {{ forms.as_p }} will render them wrapped in <p> tags
-- {{ forms.as_ul }} will render them wrapped in <li> tags

# Note: We will have to provide surroundings <table> or <ul> tag yourself.

# Note: Each form field has an ID attribute set to id_<field-name>
        <input type="text" name="name" maxlength="100" required id="id_name">
# for js manipultaion and patching works id="id_name" is automatically generated by django.

----------------------------------------------------------------------

--------------Rendering Fields Manually-----------------------

# Each Field is available as an attibute of form using:
   {{ form.field_name }}



{{ form.non_field_errors }} used to output non_field_errors.
--not for only specific but as a whole field errors will be kept in non_field_errors.

# we had created name field and we can take field id by using .id_for__label
# but we can do it in shortcut way {{ form.name.label_tag }}
# then render the form with {{ form.name }}


     <div>
            {{ form.name.errors }}

            <label for="{{ form.name.id_for_label }}">Email subject: </label>
            <!-- or label can be generated using -->
            {{ form.name.label_tag }}

            {{ form.name }}
        </div>
----this is only for only mannual rendering--------
-----------------------------------------------------------------------

-------------Using form to validate Data-------------------------------

# Form.clean() [used to clean and validate fields that depends on each other]

----------------------super()-----------------------------------
The Python super() method lets you access methods from a parent class from within a child class. This helps reduce repetition in your code. super() does not accept any arguments. ... When you're inheriting classes, you may want to gain access to methods from a parent class. That's where the super() function comes in.
------------------------------------------------------------------

--------------------cleaned_data attribute-----------------------

Django Forms in Django Shell. ... In the process, Django creates an attribute called cleaned_data , a dictionary which contains cleaned data only from the fields which have passed the validation tests. Note that cleaned_data attribute will only be available to you after you have invoked the is_valid() method.

---------------------------------------------------------------------


# codes explaination-
# just like in models validation we can validate forms.

# we first created a clean func method
# .super is called bcoz if we are overridding others form  thenvalidators will also run on all form.

#with super() method.
# .clean() method data comes in self.cleaned_data and we put name and email attribute .

# now we can raise error by ourselves.


--------------------------------------------------------------------
from django import forms

class MyForm(froms.Form):
    super().clean()
    name = self.cleaned_data.get("name")
    email = self.cleaned_data.get("email")


    if email and not name:
        raise forms.validateError(
            "Name is required when email is provided"
        )

-----------------------------------------------------------------------

------------------Form Field Validation----------------------------
# Same like we did for model field validation.
# we can also insert the validator here as same as model validators.

from django.core import validators
......

class MyForm(...)
      slug = forms.CharField(validators=[validatos.validate_slug])

------------------------------------------------------------------

-------------------Cleaning a specific field attribute---------------
 # clean_<fieldname>
# I need to clean the name field or update,edit or validate it's value.


from django import forms

class MyForm(forms.Form):
    ...

    def clean_name(self):
        data = self.cleaned_data['name']
        if len(data) > 100:
            raise forms.ValidationError("Your name is really long")

        
        # Always return a value to use as the new cleaned data, even if
        # this method didn't change it

        #Note: this method can change the data value
        # That's why you can transform your value or validate them here
        # eg: data = 'Ram Bahadur '
        return data


-------------------------------------------------------------------------
    
--------------Creating Forms From Models---------------------

# we can create automatic form of models with django help.


# ModelForm
- if your form maps closely to Django models you can use ModelForm
- if you have model, and want to create a form that lets people submit data. In this case, rewriting a new Form with the field types you already declared in model seems to be redundant.So in this case, ModelForm is the solution 

-- so in this case, Django provides a helper class that lets you create a Form class from a DJango Model.

-------------------------------------------------------------------

------------------------------------------------------------------
------ this is our MyModel models we created-------------
from django.db import models

class MyModel(models.Mode):
    name = models.CharField(max_length=100)
    email = models.EmailField(max_length=200)


-------------------------------------------------------------
--------- form we created from MyModel----
----------steps of explanation----------------------
1. importing MyModel
2. we do make class MyForm which will not inherit the model from MyModel but ModelForm
---note we inherit the models from .models import MyModel------

----- we create meta class with model 
---- which model do we need to create so for that we take model from MyModel
--- model= MyModel
--- which fields do we need we will place it in fields = ['name', 'email']
--which means we need two fields name and email.

---ModelForms automatically runs the validators.
---so it makes our work easier .
---- as form automatically calls the full_clean() method.

-------------------------------------------------------
from django import forms
from .models import MyModel

class MyForm(forms.ModelForm):
    class Meta:
        model = MyModel
        fields = ['name', 'email']

--------------------------------------------------------------------

--------Every ModelForm has save() method-------------
--create and saves a data object from the data bound to the form.
--ModelForm accepts an existing model instance as the keyword argument; if this is supplied, save() will update the instance.
----------------------------------------------------------------
