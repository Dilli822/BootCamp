

  #list methods
  #append add the elements
  >>> a
  [0, 2, 3, 4]
  >>> a.append(5)
  >>> a
  [0, 2, 3, 4, 5]
  >>> #joining another list with extend
  >>> a1 = [6,7,8,9]
  >>> a.extend(a1)
  >>> a1
  [6, 7, 8, 9]
  >>> a
  [0, 2, 3, 4, 5, 6, 7, 8, 9]

  # extend
  >>> l1 = [1,2,3,4,5]
>>> l2 = [6,7,8,9,10]
>>> l1.extend(l2)
>>> l1
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> l2
[6, 7, 8, 9, 10]

# insert method
# this method replace the existing value
# by taking parameters
l1.insert(0,0)
>>> l1
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# here 0 came at o index

# remove method takes value as parameters
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> l1.remove(10)
>>> l1
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# here we wanted to remove the 10

# pop method on list with indexing
>>> l1.pop(7)
7
>>> l1
[0, 1, 2, 3, 4, 5, 6, 8]
# removing the elements at index 7 i.e. 7
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> l1.pop()
9
# pop the data from last
 #clear delete all the elements of lists
 >>> l1
 [0, 1, 2, 3, 4, 5, 6, 8]
 >>> l1.clear()
 >>> l1
 []

# finding the index of list elements
 >>> l2
[6, 7, 8, 9, 10]
>>> # with index method we can get the index numbering of lists elements
>>> l2.index(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 1 is not in list
>>> l2
[6, 7, 8, 9, 10]
>>> l2.index(7)
1
# hacks to find the numbers between the indexing
>>> l2
[6, 7, 8, 9, 10]
>>> l2.index(7)
1
>>> l2.index(4, 1, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 4 is not in list
>>> l2.index(7, 0, 1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 7 is not in list
>>> l2.index(6, 0, 1)
0
>>>
# above we put the parameters to find the value indexing
# search 4 in between index 1 and 2 and if found return index number\
# if not found return Value Error
#>>> l2
[6, 7, 8, 9, 10]
>>> l2.index(8, 0, 5)
2
# try without start and end parameters i.e ls.index(6)
>>> # count method
>>> l2.count(6)
1
>>> l2.append(7)
>>> l2
[6, 7, 8, 9, 10, 7]
>>> l2.count(7)
2
# this method count the number of elements repeated!

# reverse method
>>> l1= [1,2,3,4,5]
>>> l1.reverse()
>>> l1
[5, 4, 3, 2, 1]
>>>
# copy method
# but in copy the list are differen objt
>>> l1 = [1,2,3,4,5]
>>>l2 = l1.copy()
>>> l2 = [1,2,3,4,5]
>>> id(l1)
140206695776896
>>> id(l2)
140206697532544

# this is just shallow copy but not deeep copy

#shallow copy
>>> a = [1,2,3]
>>> b = [3,4,5]
>>> l1 = [a,b]
>>> l1
[[1, 2, 3], [3, 4, 5]]
>>> l2 = l1.copy()
>>> l2
[[1, 2, 3], [3, 4, 5]]
>>> a.append(8)
>>> a
[1, 2, 3, 8]
>>> l1
[[1, 2, 3, 8], [3, 4, 5]]
>>> l2
[[1, 2, 3, 8], [3, 4, 5]]
>>> this shows they are not in deep copy and somehow related


>>> # example of deep copy
>>> # importing
>>> import copy
>>> l3 = copy.deepcopy(l1)
>>> a.append(7)
>>> l1
[[1, 2, 3, 8, 7], [3, 4, 5]]
>>> l2
[[1, 2, 3, 8, 7], [3, 4, 5]]
>>> l3
[[1, 2, 3, 8], [3, 4, 5]]
# l2 is shallow but l3 is deep copy so 
# l1 and l3 are completely different objects

# both are same object
>>> l1 = l2
>>> id(l1)
140206697532544
>>> id(l2)
140206697532544

# sort method
#it makes sequences and sorts the elements
>>> a = [1,5,4,8,7,9,3,6,2]
>>> a.sort()
>>> a
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> b = ['i','o','a','e','u']
>>> b.sort()
>>> b
['a', 'e', 'i', 'o', 'u']
>>> a.sort(reverseTrue)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'reverseTrue' is not defined
>>> a.sort(reverse=True)
>>> a
[9, 8, 7, 6, 5, 4, 3, 2, 1]
>>>b.sort(reverse=True)
>>> b
['u', 'o', 'i', 'e', 'a']

# it also gives us key  and function for aranging data
>>> m.sort(key=arrange)
>>> m
[(2, 1), (4, 2), (1, 3), (1, 5), (1, 5)]
>>> l = [(2,3),(1,1),(4,2),(5,5),(2,4)]
>>> def arrange(data):
...   return data[1]
... 
>>> l.sort(key=arrange)
>>> l
[(1, 1), (4, 2), (2, 3), (2, 4), (5, 5)]
# here 1 2 3 4 5 and 

>>> # to make it descending order we use
>>> l.sort(key=arrange, reverse=True)
>>> l
[(5, 5), (2, 4), (2, 3), (4, 2), (1, 1)]
 # this shows sort also gives us key param to sort the lists elements
 
 # line comprehension

 #normally we use this loop
 >>> for x in range(5):
...   l.append(x*5)
... 
>>> l
[0, 5, 10, 15, 20)

# but with the comprehension we can write short code and execute the same takes
 >>> l = [x*5 for x in range(5)]
>>> l
[0, 5, 10, 15, 20]
>>> # this is line comprehension with range instead of using the loops
>>> # this comprehension works with all mutable data types
>>> # it works with lists,sets,dict
>>> 