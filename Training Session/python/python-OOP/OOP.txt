

   # OOP -> Object oriented Programming
   --> programming paradigm that provides states and methods/ properties and behaviours bundled into individual Object


    # classes in python
     --> blueprint for the Object
     # creating the python classes
     --> we create python class with class keyword
     --> keyword class is followed by object name
     --> CapWords convention or CamelCase notation
     -->we can create several objects with class keyword
     and each objects has several attributes and methods 
     which is defined

     # creating class
     class Vehicle:
         pass
        # this creates a class named Vehicle.
     
     # creating object  initiating object
     obj = Vehicle()
     # here obj is an object of Vehicle


     # attributes
     --> it is a characteristics of classes 
     # attributes are two types instance and class attributes

     # creating class with object vehicles

... class Vehicle: # whereas this is class attributes

...  def __intit__(self, color, doors):   # these init are instance attributes
...      self.color = color
...      self.doors = doors

# just above the init method we can find the class attributes

# The method used to call the object or init is called initializer
--> i.e. __init__(): or class init method 
# it is automatically called when we initiate the class

# class attribute are unique to each class
class Vehicle:
  category = 'car'  # here category is also class attributes

 def __init__(self, color, doors):  
     self.color = color
     self.doors = doors

  
   # using method
   >>> class Vehicle:
...     category = 'car'
... 
>>> def __init__(self, color, doors):
... """
... color and doors are instance attributes
... """

>>> def description(self):
... """
... THis method returns the description of the object
... """
>>> return f"This vehicle's color is {self.color} and it has {self.doors} doors."

>>> rover = Vehicle('red', '4')

>>> print(rover.description())


    # we can change the attributes through methods


class Vehicle:
        category = 'car'

        def __init__(self, color, doors):
            """
            color and doors are instance attributes
            """
            self.color = color
            self.doors = doors

        
        def make_it_blue(self):
            """
            change the color attribute to blue
            """
            self.color = "blue"

        
        rover = Vehicle('red','4')
        print(f"Before: {rover.color}")

        rover.make_it_blue()
        print(f"After: {rover.color}")

   # here rover is object with attributes
   # color and modified the color to blue
   # with the help of method

# class object is created
   >>> class Vehicle:
...  doors = 4 # this is class atributes
...  def __init__(self, color, mileage): # object is initiated
...        self.color = color     # instance attributes
...        self.mileage = mileage
... 
# applying methods to attributes
>>> def make_it_blue(self):    
...        self.color = "blue"
...  
>>> def get_info(self):
...  return f"{self.color} vehicle has mileage{self.mileage}"
... 

# invoking the attributes through objects variables
>>> vehicle1 = Vehicle("red", 25)
>>> vehicle2 = Vehicle("white", 20)
 

 # printing the output
 >>> print(vehicle1.color)
red
>>> print(vehicle1.mileage)
25
>>> print(f"vehicle1 doors: {vehicle2.doors}")
vehicle1 doors: 4
>>> print(f"vehicle2 doors: {vehicle2.doors}")
vehicle2 doors: 4


# examples


class MyClass:
     x = 5
p1 = MyClass()
print(p1.x)

class MyName:
     name = "dilli"

myname = MyName()
print(myname.name)

# creating class
class Object:
     def __init__(self, name, age):
          self.name = name
          self.age = age

Object("john", 25)
print(Object)
var = Object("hari", 45)
print(var.name)
print(var.age)


class Gender:
     def hari(name, age):
          name = "hari"
          age = 45
     
Gender()
p2 = Gender()

