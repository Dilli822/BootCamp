
-----------------Web-Application-with-Flask---------------

# Let's create an app by using flask.

---GET
--- POST
--- Query
-------------------------------
# small app which allows user to add the username, email and small text message and also allow them to view other users's email,name and text message.

--------------------------------------------------

# start a new project flask web app
# install flask
--cmd --pip install flask
-----------------------------------------
# create and activate virtual environment for python
# install pip install virtualenv
# virtualenv mypythonenv
# source mypythonenv/bin/activate
-----now it has to be created and activated the virtual env of python

----------------------------------------------------------


# create a python file named app.py

# we import flask from Flask
# let's initialised the Flask class obj name

# we use @app.route('/') decorator which should call the function home and return 
# Hello world from func home and our decorator is directing the default route/url
# default route url  http://127.0.0.1:5000/
# it should return Hello World
# app.py

from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return "Hello World"

    if __name__ == '__main__':
    app.run()

# we have added condition if so that if python run this scripts then app will run.

# we have return hello world

# but we need to return whole html template for that we have to render the html template in the browser.

---------------------------------------------------

# now we use render_template function given by flask
# and return the render_template form.html which was created for template purpose.

# app.py
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    # return "Hello World"
    return render_template('form.html')



if __name__ == '__main__':
    app.run()


*******************************************************

─$ python3 app.py
 * Serving Flask app "app" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
127.0.0.1 - - [28/Aug/2021 16:05:00] "GET / HTTP/1.1" 200 -

*********************************************************

# turn off the debug mode so that we don't need to do 
restarting server everytime for viewing the changes on web app.

#for making DEBUG MODE: ON 
# cmd -- export FLASK_DEUBG=1

**************************************************************
──(dilli㉿acer-g41)-[/media/…/IW-BootCamp/Training Session/Web Application/Python-Web-App-with-flask]
└─$ export FLASK_DEBUG=1
                                                                  
┌──(dilli㉿acer-g41)-[/media/…/IW-BootCamp/Training Session/Web Application/Python-Web-App-with-flask]
└─$ python3 app.py
 * Serving Flask app "app" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
      Use a production WSGI server instead.
 * Debug mode: on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 175-811-156
***************************************************************



------------------------------------------------------------------
# create a form.html and render it to app.py
# we have created a template now let's setup database.
# let's connect our template to db.
# for that we need to make a model.
# before making model let's install 
---cmd pip install flask-sqlalchemy
# installing package flask-sqlalchemy
# sqlalchemy is like an ORM mapper with the help of
# this we can hit the query to db by using the python code.
# for flask this package could be best.

---------------------------------------------------------
# we have imported flask_sqlalchemy
# and config app and connect the sqlalchemy with present
# working database and setup the database
# and we have pass the SQLAlchemy(app) to the object called db.
# Class Contact here Contact will be our table name in db and db name is contact.db



# app.py
from flask import Flask, render_template
from flask_sqlalchemy import SQLAlchemy


app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URL'] = 'sqlite:///contact.db'
db = SQLAlchemy(app)

class Contact(db.Model):
    pass


@app.route('/')
def home():
    # return "Hello World"
    return render_template('form.html')


if __name__ == '__main__':
    app.run()


------------------------------------------------------------------
# we have created a class Contact
# and we have id obj which is primary_key for this case takes Integer and remain True
# and we keep other required fiels as on templates
# for eg name, email

# app.py
from flask import Flask, render_template
from flask_sqlalchemy import SQLAlchemy


app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URL'] = 'sqlite:///contact.db'
db = SQLAlchemy(app)


class Contact(db.Model):
    id = db.Column(db.Integer, primary_key = True)


@app.route('/')
def home():
    # return "Hello World"a
    return render_template('form.html')


if __name__ == '__main__':
    app.run()


--------------------------------------------------------

# we have added required fields of name,email,password and message
# and we have all these col table in the db with string upto 25 and 120
# keeping the nullable False
# we have also overrided the str obj name with self.name


from flask import Flask, render_template
from flask_sqlalchemy import SQLAlchemy


app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URL'] = 'sqlite:///contact.db'
db = SQLAlchemy(app)


class Contact(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    name = db.Column(db.String(25), nullable=False)
    email = db.Column(db.String(25), nullable=False)
    password = db.Column(db.String(25), nullable=False)
    repeat_password = db.Column(db.String(25), nullable=False)
    message = db.Column(db.String(120), nullable=False)
    

    def __str__(self):
        return f'user is {self.name}'


@app.route('/')
def home():
    # return "Hello World"a
    return render_template('form.html')


if __name__ == '__main__':
    app.run()
